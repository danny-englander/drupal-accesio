{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('accesio/hero') }}

{# if link target is not empty, set a variable. #}
{% if content.field_link.0["#url"].getOptions().attributes .target | render %}
  {% set target = 'target = _' ~ content.field_link.0["#url"].getOptions().attributes .target %}
{% endif %}

{% set classes = [
  'hero',
  'component__item',
  'component__item--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'component__item--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'component__item--unpublished'
] %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}

      <div class="hero__wrap">

        <div class="hero__media">
          {{ content.field_media | field_value }}
        </div>

        <div class="hero__content">
          <div class="hero__content-inner">

            <div class="hero__text-wrap">

              <div class="hero__title">
                {% if is_h1 | render %}
                  {# if h1 checkbox has been filled. #}
                  <h1>{{ content.field_title | field_value }}</h1>
                {% else %}
                  <h2>{{ content.field_title | field_value }}</h2>
                {% endif %}
              </div>

              {% if content.field_text_format | render %}
                <div class="hero__text has-text">
                  {{ content.field_text_format | field_value }}
                </div>
              {% endif %}

            </div><!-- // hero__text-wrap -->

            {% if content.field_link | render %}
              <div class="hero__link">
                <a class="btn btn-hollow btn-hollow-inverse"
                   href="{{ content.field_link.0["#url_title"] }}"
                  {{ target }}
                   role="button"
                   title="{{ 'Learn more about'|t }} {{ content.field_title | field_value }}"
                   aria-label="{{ 'Learn more about'|t }} {{ content.field_title | field_value }}">
                  {{ content.field_link.0["#title"] }}
                </a>
              </div>
            {% endif %}

          </div>
        </div>
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
