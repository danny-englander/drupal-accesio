{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% if tabs_style_underlined | render %}
  {% set tabs_style = 'sf-tabs--underlined' %}
{% else %}
  {% set tabs_style = 'sf-tabs--standard' %}
{% endif %}

{# Sets a unique ID for tabs from the Paragraph ID. #}
{% set paragraph_id = 'tab-' ~ paragraph.id.value %}

{% set classes = [
  'paragraph',
  'js-tabs',
  tabs_style,
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}


{#<div class="js-tabs" data-existing-hx="h2" data-tabs-prefix-class="style-tabs">#}
{#  <ul class="js-tablist">#}
{#    {% for item in tab_names %}#}
{#      <li class="js-tablist__item">#}
{#        <a href="#tab-id-item-{{ loop.index }}" class="js-tablist__link">{{ item.title }}</a>#}
{#      </li>#}
{#    {% endfor %}#}
{#  </ul>#}

{#  <div id="tab-id-item-1" class="js-tabcontent">#}
{#    <div class="js-tabcontent__inner">#}

{{ attach_library('accesio/a11y_tabs') }}

{% block paragraph %}

  <section{{ attributes.addClass(classes) }} id="sf-tabs-id-{{ paragraph.id.value }}" data-existing-hx="h2" data-tabs-prefix-class="style-tabs">

    {% if content.field_component_title | render %}
      <h2 class="component-title">{{ content.field_component_title | field_value }}</h2>
    {% endif %}

    {% block content %}

      {% if content.controls | render %}
        {{ content.controls }}
        {{ content.insert_before }}
        {{ content.insert_after }}
      {% endif %}

{#      <nav class="sf-tabs__nav-wrap">#}
        <ul class="js-tablist" role="tablist">
          {# Loops through the tab sections to print the tab section titles. #}
          {% for key, item in content.field_tabs_item if key|first != '#' %}
            <li role="presentation" class="js-tablist__item {% if loop.first %} active{% endif %}">
              <a class="js-tablist__link" href="#{{ paragraph_id }}-{{ key + 1 }}"
                 aria-controls="{{ item['#paragraph'].field_title.value }}"
                 role="tab"
                 data-toggle="tab">
                {{ item['#paragraph'].field_title.value }}
              </a>
            </li>
          {% endfor %}
        </ul>
{#      </nav>#}

        {# Loops through the tab sections again to print field_components . #}
        {% for key, item in content.field_tabs_item if key|first != '#' %}
          <div role="tabpanel" class="js-tabcontent {% if loop.first %} active{% endif %}"
               id="{{ paragraph_id }}-{{ key + 1 }}">
            <div class="js-tabcontent__inner">
            {% for components_key, components_item in item['#paragraph'].field_components %}
              {% set section_components= item %}
              {{ section_components }}
            {% endfor %}
            </div>
          </div>
        {% endfor %}

    {% endblock %}
  </section>
{% endblock paragraph %}
